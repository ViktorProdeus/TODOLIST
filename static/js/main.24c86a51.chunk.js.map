{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTask","newTitle","trim","addItem","TextField","style","background","borderRadius","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","color","onClick","AddCircleOutlined","fontSize","EditableSpan","editMode","setEditMode","activateViewMode","trimTitle","label","id","defaultValue","size","onBlur","autoFocus","onDoubleClick","Task","todolistId","task","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeStatusHandler","newIsDoneValue","checked","onChangeTitleHandler","newValue","isDone","textDecoration","Checkbox","Delete","Todolist","tasks","changeFilter","removeTodolist","changeTodolistTitle","filter","todo","useSelector","state","todolists","addTaskHandler","removeTodolistHandler","changeTodolistTitleHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","t","listStyle","paddingLeft","map","Button","todolistId1","v1","todolistId2","initialState","AppWithRedux","dispatch","useDispatch","todoLists","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","changeTodoListFilterAC","todoListId","changeTodoListTitleAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","maxWidth","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","newTodolistID","newTodolist","todoListTitleToUpdate","todoListFilterToUpdate","newTask","todolistTasks","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.24c86a51.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddCircleOutlined} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.addItem(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                style={{background: \"white\", borderRadius: \"5px\"}}\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addTask}>\r\n                <AddCircleOutlined fontSize={\"large\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n    console.log('EditableSpan called');\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    };\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        const trimTitle = title.trim()\r\n        if (trimTitle) {\r\n            props.onChange(trimTitle);\r\n        } else {\r\n            props.onChange(props.title);\r\n        }\r\n    }\r\n\r\n    const onEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode()\r\n        }\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        return setTitle(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return editMode ?\r\n        <TextField\r\n            label={props.title} // вместо value={title}\r\n            id=\"outlined-size-small\"\r\n            defaultValue=\"Small\"\r\n            variant=\"standard\"\r\n            size=\"small\"\r\n            onBlur={activateViewMode}\r\n            // value={title}\r\n            autoFocus\r\n            onChange={onChangeTitleHandler}\r\n            onKeyPress={onEnterPress}\r\n        />\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {TaskType} from \"./Todolist\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nconst Task = React.memo((props: TaskPropsType) => {\r\n    const {\r\n        todolistId,\r\n        task,\r\n        changeTaskStatus,\r\n        changeTaskTitle,\r\n        removeTask,\r\n    } = props;\r\n\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [removeTask, task.id, todolistId])\r\n    const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue, todolistId);\r\n    }, [task.id, todolistId, changeTaskStatus]);\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    }, [changeTaskTitle, task.id, todolistId]);\r\n\r\n    return (\r\n        <li key={task.id} style={task.isDone ? {\r\n            textDecoration: \"line-through\",\r\n            color: \"rgba(0,0,0,0.3)\"\r\n        } : {textDecoration: \"none\"}}>\r\n            <Checkbox\r\n                color={\"primary\"}\r\n                onChange={onChangeStatusHandler}\r\n                checked={task.isDone}\r\n            />\r\n\r\n            <EditableSpan onChange={onChangeTitleHandler} title={task.title}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete fontSize=\"small\"/>\r\n            </IconButton>\r\n        </li>\r\n    );\r\n});\r\n\r\nexport default Task;","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Task from \"./Task\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store/store\";\r\nimport {TodoListType} from \"./AppWithRedux\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo(((props: PropsType) => {\r\n    const {\r\n        id,\r\n        // title,\r\n        tasks,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle,\r\n        removeTask,\r\n        removeTodolist,\r\n        changeTodolistTitle,\r\n        filter\r\n    } = props;\r\n\r\n    console.log(\"Todolist called\")\r\n    // для оптимизации через хук useSelector\r\n    const todo = useSelector<AppRootState, TodoListType>(state => state.todolists.filter(todo => todo.id === id)[0]);\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, id)\r\n    }, [addTask, id])\r\n\r\n    const removeTodolistHandler = useCallback(() => removeTodolist(id), [removeTodolist, id]);\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(id, title);\r\n    }, [changeTodolistTitle, id])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id]);\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id]);\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id]);\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan onChange={changeTodolistTitleHandler} title={todo.title}/> {/*для оптимизации через хук useSelector*/}\r\n                <IconButton onClick={removeTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTaskHandler}/>\r\n\r\n            <ul style={{listStyle: \"none\", paddingLeft: 0}}>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n\r\n                        return <Task\r\n                            key={t.id}\r\n                            todolistId={id}\r\n                            task={t}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            removeTask={removeTask}\r\n                        />\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button variant={filter === 'all' ? \"contained\" : \"text\"}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : \"text\"} color={\"primary\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}))\r\n\r\n\r\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const REMOVE_TODOLIST = \"REMOVE-TODOLIST\";\r\nexport const ADD_TODOLIST = \"ADD-TODOLIST\";\r\nconst CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\";\r\nconst CHANGE_TODOLIST_FILTER = \"CHANGE-TODOLIST-FILTER\";\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: typeof REMOVE_TODOLIST\r\n    todoListId: string\r\n}\r\n\r\nexport type AddTodolistAT = {\r\n    type: typeof ADD_TODOLIST\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTodolistTitleAT = {\r\n    type: typeof CHANGE_TODOLIST_TITLE\r\n    id: string,\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodoListFilterAT = {\r\n    type: typeof CHANGE_TODOLIST_FILTER\r\n    filter: FilterValuesType,\r\n    todolistId: string\r\n}\r\nexport const todolistId1 = v1();\r\nexport const todolistId2 = v1();\r\n\r\nconst initialState: TodoListType[] = [\r\n    {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n    {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n];\r\n\r\nexport type ActionsType = RemoveTodoListAT | AddTodolistAT | ChangeTodolistTitleAT | ChangeTodoListFilterAT;\r\n\r\nexport const todoListsReducer = (state: TodoListType[] = initialState, action: ActionsType): TodoListType[] => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(tl => tl.id !== action.todoListId);\r\n\r\n        case ADD_TODOLIST:\r\n            const newTodolistID = action.todolistId;\r\n\r\n            const newTodolist: TodoListType = {\r\n                id: newTodolistID,\r\n                title: action.title,\r\n                filter: \"all\",\r\n            };\r\n\r\n            return [newTodolist, ...state];\r\n\r\n        case CHANGE_TODOLIST_TITLE:\r\n            const todoListTitleToUpdate = state\r\n                .map(tl => (tl.id === action.id)\r\n                    ? {...tl, title: action.title}\r\n                    : tl);\r\n\r\n            return [...todoListTitleToUpdate];\r\n\r\n        case CHANGE_TODOLIST_FILTER:\r\n            const todoListFilterToUpdate = state\r\n                .map(tl => (tl.id === action.todolistId)\r\n                    ? {...tl, filter: action.filter}\r\n                    : tl);\r\n\r\n            return [...todoListFilterToUpdate];\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListAT => {\r\n    return {\r\n        type: REMOVE_TODOLIST,\r\n        todoListId\r\n    }\r\n};\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistAT => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        title,\r\n        todolistId: v1()\r\n    }\r\n};\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string): ChangeTodolistTitleAT => {\r\n    return {\r\n        type: CHANGE_TODOLIST_TITLE,\r\n        id,\r\n        title\r\n    }\r\n};\r\n\r\nexport const changeTodoListFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodoListFilterAT => {\r\n    return {\r\n        type: CHANGE_TODOLIST_FILTER,\r\n        todolistId,\r\n        filter,\r\n    }\r\n};","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {\r\n    ADD_TODOLIST,\r\n    AddTodolistAT,\r\n    REMOVE_TODOLIST,\r\n    RemoveTodoListAT,\r\n    todolistId1,\r\n    todolistId2\r\n} from \"./todolists-reducer\";\r\n\r\nconst REMOVE_TASK = \"REMOVE-TASK\";\r\nconst ADD_TASK = \"ADD-TASK\";\r\nconst CHANGE_STATUS_TASK = \"CHANGE-STATUS-TASK\";\r\nconst CHANGE_TITLE_TASK = \"CHANGE-TITLE-TASK\";\r\n\r\nexport type RemoveTaskAT = {\r\n    type: typeof REMOVE_TASK\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\nexport type AddTaskAT = {\r\n    type: typeof ADD_TASK\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeStatusTaskAT = {\r\n    type: typeof CHANGE_STATUS_TASK\r\n    isDone: boolean\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTitleTaskAT = {\r\n    type: typeof CHANGE_TITLE_TASK\r\n    title: string\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveTaskAT\r\n    | AddTaskAT\r\n    | ChangeStatusTaskAT\r\n    | ChangeTitleTaskAT\r\n    | AddTodolistAT\r\n    | RemoveTodoListAT;\r\n\r\nconst initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true}\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"React Book\", isDone: true}\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK: {\r\n            let tasks = state[action.todolistId].filter(t => t.id !== action.taskId);\r\n\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [...tasks]\r\n            }\r\n        }\r\n\r\n        case ADD_TASK: {\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            let todolistTasks = state[action.todolistId];\r\n\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...todolistTasks]\r\n            }\r\n        }\r\n\r\n        case CHANGE_STATUS_TASK: {\r\n            let tasks = state[action.todolistId]\r\n                .map(t => (t.id === action.taskId)\r\n                ? {...t, isDone: action.isDone}\r\n                : t);\r\n\r\n            return ({...state, [action.todolistId]: tasks}) // у Димыча ({...state})\r\n        }\r\n\r\n        case CHANGE_TITLE_TASK: {\r\n            const tasks = state[action.todolistId]\r\n            .map(t => (t.id === action.taskId)\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n\r\n            return ({...state, [action.todolistId]: tasks}) // у Димыча ({...state})\r\n        }\r\n\r\n        case ADD_TODOLIST: {\r\n\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n\r\n        case REMOVE_TODOLIST: {\r\n\r\n            const copyState = {...state};\r\n\r\n            delete copyState[action.todoListId];\r\n\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskAT => {\r\n    return {\r\n        type: REMOVE_TASK,\r\n        taskId,\r\n        todolistId\r\n    }\r\n};\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskAT => {\r\n    return {\r\n        type: ADD_TASK,\r\n        title,\r\n        todolistId\r\n    }\r\n};\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeStatusTaskAT => {\r\n    return {\r\n        type: CHANGE_STATUS_TASK,\r\n        taskId,\r\n        isDone,\r\n        todolistId\r\n    }\r\n};\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTitleTaskAT => {\r\n    return {\r\n        type: CHANGE_TITLE_TASK,\r\n        taskId,\r\n        title,\r\n        todolistId\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch();\r\n    const todoLists = useSelector<AppRootState, TodoListType[]>(state => state.todolists);\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks);\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodoListFilterAC(value, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodoListAC(id);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodoListTitleAC(title, id);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        color=\"inherit\"\r\n                        variant={\"outlined\"}\r\n                    >Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container style={{maxWidth: \"1920px\"}}>\r\n                <Grid container style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            // let allTodolistTasks = tasks[tl.id];\r\n                            // let tasksForTodolist = allTodolistTasks;\r\n                            //\r\n                            // if (tl.filter === \"active\") {\r\n                            //     tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n                            // }\r\n                            // if (tl.filter === \"completed\") {\r\n                            //     tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n                            // }\r\n\r\n                            return (\r\n                                <Grid key={tl.id} item>\r\n                                    <Paper style={{padding: \"20px\"}}>\r\n                                        <Todolist\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasks[tl.id]}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\n// type AppRootState = {\r\n//     todolists: TodoListType[]\r\n//     tasks: TasksStateType\r\n// }\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import App from \"./App\";\r\n// import AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}