{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","className","title","type","checked","tasks","isDone","App","headings","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAqCeA,MAxBf,SAAkBC,GACd,OACI,yBAAKC,UAAU,OACX,6BACI,4BAAKD,EAAME,OACX,6BACI,gCACA,sCAEJ,4BACI,4BAAI,2BAAOC,KAAK,WAAWC,QAASJ,EAAMK,MAAM,GAAGC,SAAnD,IAA6D,8BAAON,EAAMK,MAAM,GAAGH,QACnF,4BAAI,2BAAOC,KAAK,WAAWC,QAASJ,EAAMK,MAAM,GAAGC,SAAnD,IAA6D,8BAAON,EAAMK,MAAM,GAAGH,QACnF,4BAAI,2BAAOC,KAAK,WAAWC,QAASJ,EAAMK,MAAM,GAAGC,SAAnD,IAA6D,8BAAON,EAAMK,MAAM,GAAGH,SAEvF,6BACI,uCACA,0CACA,iDCILK,MA9Bf,WACI,IAAMC,EAAW,CAAC,gBAAiB,OAAQ,SAoB3C,OACI,6BACI,kBAAC,EAAD,CAAUN,MAAOM,EAAS,GAAIH,MApBvB,CACX,CAACI,GAAI,EAAGP,MAAO,WAAYI,QAAQ,GACnC,CAACG,GAAI,EAAGP,MAAO,KAAMI,QAAQ,GAC7B,CAACG,GAAI,EAAGP,MAAO,UAAWI,QAAQ,MAkB9B,kBAAC,EAAD,CAAUJ,MAAOM,EAAS,GAAIH,MAfvB,CACX,CAACI,GAAI,EAAGP,MAAO,cAAeI,QAAQ,GACtC,CAACG,GAAI,EAAGP,MAAO,aAAcI,QAAQ,GACrC,CAACG,GAAI,EAAGP,MAAO,KAAMI,QAAQ,MAazB,kBAAC,EAAD,CAAUJ,MAAOM,EAAS,GAAIH,MAVvB,CACX,CAACI,GAAI,EAAGP,MAAO,SAAUI,QAAQ,GACjC,CAACG,GAAI,EAAGP,MAAO,SAAUI,QAAQ,GACjC,CAACG,GAAI,EAAGP,MAAO,SAAUI,QAAQ,QCVrBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b22b042.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype propsType = {\r\n    title: string\r\n    tasks: Array<inArray>\r\n}\r\n\r\ntype inArray = {\r\n    id : number\r\n    title : string\r\n    isDone: boolean\r\n}\r\n\r\nfunction TodoList(props: propsType) {\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>{props.title}</h3>\r\n                <div>\r\n                    <input/>\r\n                    <button>+</button>\r\n                </div>\r\n                <ul>\r\n                    <li><input type=\"checkbox\" checked={props.tasks[0].isDone}/> <span>{props.tasks[0].title}</span></li>\r\n                    <li><input type=\"checkbox\" checked={props.tasks[1].isDone}/> <span>{props.tasks[1].title}</span></li>\r\n                    <li><input type=\"checkbox\" checked={props.tasks[2].isDone}/> <span>{props.tasks[2].title}</span></li>\r\n                </ul>\r\n                <div>\r\n                    <button>All</button>\r\n                    <button>Active</button>\r\n                    <button>Completed</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\n\r\nfunction App() {\r\n    const headings = ['What to learn', 'Song', 'Books'];\r\n\r\n    const tasks1 = [\r\n        {id: 1, title: 'HTML&CSS', isDone: true},\r\n        {id: 2, title: 'JS', isDone: true},\r\n        {id: 3, title: 'ReactJS', isDone: false},\r\n    ];\r\n\r\n    const tasks2 = [\r\n        {id: 1, title: 'Hello world', isDone: false},\r\n        {id: 2, title: 'I am happy', isDone: true},\r\n        {id: 3, title: 'Yo', isDone: false},\r\n    ]\r\n\r\n    const tasks3 = [\r\n        {id: 1, title: 'Animal', isDone: false},\r\n        {id: 2, title: 'nature', isDone: false},\r\n        {id: 3, title: 'People', isDone: true},\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <TodoList title={headings[0]} tasks={tasks1}/>\r\n            <TodoList title={headings[1]} tasks={tasks2}/>\r\n            <TodoList title={headings[2]} tasks={tasks3}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}