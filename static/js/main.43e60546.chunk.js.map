{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","Checkbox","Delete","Todolist","demo","changeFilter","addTask","removeTodolist","changeTodolistTitle","useDispatch","useEffect","thunk","items","addTaskHandler","changeTodolistTitleHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"mMAuFYA,EAOAC,E,uCChFGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gGDPRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CAEL,UAAW,0CAKNC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KANrFF,EAAe,SASTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAVvDJ,EAAe,SAaTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAdlEF,EAAe,SAiBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAlBFP,EAAe,SAoBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KArBlER,EAAe,SAuBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA8DI,EAA9D,UAAkF,CAACL,MAAOO,KAxB5FT,EAAe,SA0BbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,IAMnFC,EAAU,SAEbC,GACF,OAAOlB,EAASS,KAAT,aAA8DS,IAHhED,EAAU,WAOf,OAAOjB,EAASW,OAAT,eAPFM,EAAU,WAWf,OAAOjB,EAASO,IAAT,a,SA+BHlB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KE1FL,IAAM6B,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAc,CAACC,MAAON,EAAKG,SAAS,MAE7CD,EAASG,EAAc,CAACC,MAAO,yBAEnCJ,EAASK,EAAe,CAACC,OAAQ,aAGxBC,EAA2B,SAACH,EAA4BJ,GACjEA,EAASG,EAAc,CAACC,MAAOA,EAAMI,QAAUJ,EAAMI,QAAU,yBAC/DR,EAASK,EAAe,CAACC,OAAQ,a,QCL/BG,EAAQC,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjBC,YAAY,GAMZC,SAAU,CACNC,gBADM,SACUC,EAAOC,GACnBD,EAAMH,WAAaI,EAAOC,QAAQC,UAOjCC,EAAcX,EAAMY,QAcnBN,EAAmBN,EAAMa,QAAzBP,gBCzBRN,EAAQC,YAAY,CACtBC,KAAM,MACNC,aARiB,CACjBN,OAAQ,OACRF,MAAO,KACPmB,eAAe,GAMfT,SAAU,CACNX,cADM,SACQa,EAAOC,GACjBD,EAAMZ,MAAQa,EAAOC,QAAQd,OAEjCC,eAJM,SAISW,EAAOC,GAClBD,EAAMV,OAASW,EAAOC,QAAQZ,QAElCkB,oBAPM,SAOcR,EAAOC,GACvBD,EAAMO,cAAgBN,EAAOC,QAAQC,UAKpCM,EAAahB,EAAMY,Q,EAsBoCZ,EAAMa,QAA5DnB,E,EAAAA,cAAeE,E,EAAAA,eAAgBmB,E,EAAAA,oBC1CvCf,EAAQC,YAAY,CACtBC,KAAM,YACNC,aAJ4C,GAK5CE,SAAU,CACNY,iBADM,SACWV,EAAOC,GACpB,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMc,OAAOH,EAAO,IAExBI,cALM,SAKQf,EAAOC,GACjBD,EAAMgB,QAAN,2BAAkBf,EAAOC,QAAQe,UAAjC,IAA2CC,OAAQ,MAAOC,aAAc,WAE5EC,sBARM,SAQgBpB,EAAOC,GACzB,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMW,GAAOvC,MAAQ6B,EAAOC,QAAQ9B,OAGxCiD,uBAbM,SAaiBrB,EAAOC,GAC1B,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMW,GAAOO,OAASjB,EAAOC,QAAQgB,QAGzCI,6BAlBM,SAkBuBtB,EAAOC,GAChC,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMW,GAAOQ,aAAelB,EAAOC,QAAQZ,QAE/CiC,eAtBM,SAsBSvB,EAAOC,GAClB,OAAOA,EAAOC,QAAQsB,UAAUC,KAAI,SAAAZ,GAAE,kCAASA,GAAT,IAAaK,OAAQ,MAAOC,aAAc,gBAM/EO,EAAmBjC,EAAMY,Q,EAqBwGZ,EAAMa,QAAtII,E,EAAAA,iBAAkBK,E,EAAAA,cAAeK,E,EAAAA,sBAAuBC,E,EAAAA,uBAAwBC,E,EAAAA,6BAA8BC,E,EAAAA,eC3CtH9B,GAAQC,YAAY,CACtBC,KAAM,QACNC,aAJiC,GAKjCE,SAAU,CACN6B,aADM,SACO3B,EAAOC,GAChB,IAAM2B,EAAQ5B,EAAMC,EAAOC,QAAQzB,YAC7BkC,EAAQiB,EAAMhB,WAAU,SAAAiB,GAAC,OAAIA,EAAEvD,KAAO2B,EAAOC,QAAQxB,UACvDiC,GAAS,GAAGiB,EAAMd,OAAOH,EAAO,IAExCmB,UANM,SAMI9B,EAAOC,GACbD,EAAMC,EAAOC,QAAQ6B,KAAKC,YAAYhB,QAAQf,EAAOC,QAAQ6B,OAEjEE,aATM,SASOjC,EAAOC,GAChB,IAAM2B,EAAQ5B,EAAMC,EAAOC,QAAQzB,YAC7BkC,EAAQiB,EAAMhB,WAAU,SAAAiB,GAAC,OAAIA,EAAEvD,KAAO2B,EAAOC,QAAQxB,UACvDiC,GAAS,IAAGiB,EAAMjB,GAAN,2BAAmBiB,EAAMjB,IAAWV,EAAOC,QAAQtB,SAEvEsD,WAdM,SAcKlC,EAAOC,GACdD,EAAMC,EAAOC,QAAQzB,YAAcwB,EAAOC,QAAQ0B,QAG1DO,cAAe,SAACC,GACZA,EAAQC,QAAQtB,GAAe,SAACf,EAAOC,GACnCD,EAAMC,EAAOC,QAAQe,SAAS3C,IAAM,MAExC8D,EAAQC,QAAQ3B,GAAkB,SAACV,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQ5B,OAEhC8D,EAAQC,QAAQd,GAAgB,SAACvB,EAAOC,GACpCA,EAAOC,QAAQsB,UAAUc,SAAQ,SAACzB,GAC9Bb,EAAMa,EAAGvC,IAAM,YAalBiE,GAAe9C,GAAMY,Q,GAiCiCZ,GAAMa,QAA3DqB,G,GAAAA,aAAcG,G,GAAAA,UAAWG,G,GAAAA,aAAcC,G,GAAAA,WA4CxCM,GAAe,SAAC9D,EAAgB+D,EAAwChE,GAAzD,OACxB,SAACO,EAAoB0D,GACjB,IACMX,EADQW,IACKd,MAAMnD,GAAYkE,MAAK,SAAAd,GAAC,OAAIA,EAAEvD,KAAOI,KACxD,GAAKqD,EAAL,CAMA,IAAMa,EAA6B,aAC/BC,SAAUd,EAAKc,SACfC,YAAaf,EAAKe,YAClBC,SAAUhB,EAAKgB,SACfC,UAAWjB,EAAKiB,UAChB5E,MAAO2D,EAAK3D,MACZkB,OAAQyC,EAAKzC,QACVmD,GAGPvE,EAAwBO,EAAYC,EAAQkE,GACvCtF,MAAK,SAAA2F,GACF,GAA4B,IAAxBA,EAAInE,KAAKoE,WAAkB,CAC3B,IAAMjD,EAASgC,GAAa,CAACvD,SAAQE,MAAO6D,EAAahE,eACzDO,EAASiB,QAETlB,EAAqBkE,EAAInE,KAAME,MAGtCmE,OAAM,SAAC/D,GACJG,EAAyBH,EAAOJ,WAxBpCoE,QAAQC,KAAK,iC,2DCtIZC,GAAcC,IAAMC,MAAK,SAAS,GAAoD,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC9FN,QAAQO,IAAI,sBADkF,MAGtEC,mBAAS,IAH6D,oBAGzFxF,EAHyF,KAGlFyF,EAHkF,OAItED,mBAAwB,MAJ8C,oBAIzFxE,EAJyF,KAIlF0E,EAJkF,KAMxFC,EAAiB,WACE,KAAjB3F,EAAM4F,QACNP,EAAQrF,GACRyF,EAAS,KAETC,EAAS,sBAiBjB,OAAO,gCACH,cAACG,GAAA,EAAD,CAAWC,QAAQ,WACRR,SAAUA,EACVtE,QAASA,EACTe,MAAO/B,EACP+F,SAlBS,SAACC,GACrBP,EAASO,EAAEC,cAAclE,QAkBdmE,WAfW,SAACF,GACT,OAAVhF,GACA0E,EAAS,MAEM,KAAfM,EAAEG,UACFR,KAWOS,MAAM,QACNC,WAAYrF,IAEvB,cAACsF,GAAA,EAAD,CAAYC,MAAM,UAAUC,QAASb,EAAgBL,SAAUA,EAA/D,SACI,cAACmB,GAAA,EAAD,Y,SCxCCC,GAAevB,IAAMC,MAAK,SAAUuB,GAC7C3B,QAAQO,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,oBAEtEoB,EAFsE,KAE5DC,EAF4D,OAGnDrB,mBAASmB,EAAM5E,OAHoC,oBAGtE/B,EAHsE,KAG/DyF,EAH+D,KAiB3E,OAAOmB,EACE,cAACf,GAAA,EAAD,CAAW9D,MAAO/B,EAAO+F,SALd,SAACC,GACjBP,EAASO,EAAEC,cAAclE,QAI4B+E,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZF,EAAMZ,SAAS/F,MAQb,sBAAMgH,cAda,WACrBH,GAAY,GACZpB,EAASkB,EAAM5E,QAYb,SAAwC4E,EAAM5E,W,oBCd3CkF,GAAO9B,IAAMC,MAAK,SAACuB,GAA0B,IAElDhD,EAKAgD,EALAhD,KACAtD,EAIAsG,EAJAtG,WACA6G,EAGAP,EAHAO,iBACAC,EAEAR,EAFAQ,gBACAC,EACAT,EADAS,WAEEC,EAAiBC,uBAAY,kBAAMF,EAAWzD,EAAKzD,GAAIG,KAAa,CAAC+G,EAAYzD,EAAKzD,GAAIG,IAE1FkH,EAAkBD,uBAAY,SAACtB,GACjC,IAAIwB,EAAiBxB,EAAEC,cAAcwB,QACrCP,EAAiBvD,EAAKzD,GAAIsH,EAAiB3I,EAAa6I,UAAY7I,EAAa8I,IAAKtH,KACvF,CAAC6G,EAAkBvD,EAAKzD,GAAIG,IAEzBuH,EAAuBN,uBAAY,SAACO,GACtCV,EAAgBxD,EAAKzD,GAAI2H,EAAUxH,KACpC,CAAC8G,EAAiBxD,EAAKzD,GAAIG,IAE9B,OAAO,sBAAmByH,UAAWnE,EAAKzC,SAAWrC,EAAa6I,UAAY,UAAY,GAAnF,UACH,cAACK,GAAA,EAAD,CACIN,QAAS9D,EAAKzC,SAAWrC,EAAa6I,UACtCnB,MAAM,UACNR,SAAUwB,IAGd,cAACb,GAAD,CAAc3E,MAAO4B,EAAK3D,MAAO+F,SAAU6B,IAC3C,cAACtB,GAAA,EAAD,CAAYE,QAASa,EAArB,SACI,cAACW,GAAA,EAAD,QATSrE,EAAKzD,OCRb+H,GAAW9C,IAAMC,MAAK,YAAgD,IAAD,IAApC8C,YAAoC,SAAnBvB,EAAmB,yBAC9E3B,QAAQO,IAAI,mBADkE,IAI1E1C,EASA8D,EATA9D,SACAW,EAQAmD,EARAnD,MACA2E,EAOAxB,EAPAwB,aACAC,EAMAzB,EANAyB,QACAlB,EAKAP,EALAO,iBACAC,EAIAR,EAJAQ,gBACAC,EAGAT,EAHAS,WACAiB,EAEA1B,EAFA0B,eACAC,EACA3B,EADA2B,oBAGE1H,EAAW2H,cACjBC,qBAAU,WACN,IAAIN,EAAJ,CAGA,IJ4DqB7H,EI5DfoI,GJ4DepI,EI5DMwC,EAAS3C,GJ4DQ,SAACU,GACjDA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAAsBO,GACjBnB,MAAK,SAAC2F,GACH,IAAMrB,EAAQqB,EAAInE,KAAKgI,MACvB9H,EAASkD,GAAW,CAACN,QAAOnD,gBAC5BO,EAASK,EAAe,CAACC,OAAQ,oBIjErCN,EAAS6H,MACV,CAACP,EAAMtH,EAAUiC,EAAS3C,KAE7B,IAAMyI,EAAiBrB,uBAAY,SAACtH,GAChCoI,EAAQpI,EAAO6C,EAAS3C,MACzB,CAACkI,EAASvF,EAAS3C,KAKhB0I,EAA6BtB,uBAAY,SAACtH,GAC5CsI,EAAoBzF,EAAS3C,GAAIF,KAClC,CAAC6C,EAAS3C,GAAIoI,IAEXO,EAAoBvB,uBAAY,kBAAMa,EAAa,MAAOtF,EAAS3C,MAAK,CAAC2C,EAAS3C,GAAIiI,IACtFW,EAAuBxB,uBAAY,kBAAMa,EAAa,SAAUtF,EAAS3C,MAAK,CAAC2C,EAAS3C,GAAIiI,IAC5FY,EAA0BzB,uBAAY,kBAAMa,EAAa,YAAatF,EAAS3C,MAAK,CAAC2C,EAAS3C,GAAIiI,IAGpGa,EAAmBxF,EASvB,MAPwB,WAApBX,EAASC,SACTkG,EAAmBxF,EAAMV,QAAO,SAAAW,GAAC,OAAIA,EAAEvC,SAAWrC,EAAa8I,QAE3C,cAApB9E,EAASC,SACTkG,EAAmBxF,EAAMV,QAAO,SAAAW,GAAC,OAAIA,EAAEvC,SAAWrC,EAAa6I,cAG5D,gCACH,+BAAI,cAAChB,GAAD,CAAc3E,MAAOc,EAAS7C,MAAO+F,SAAU6C,IAC/C,cAACtC,GAAA,EAAD,CAAYE,QAvBU,WAC1B6B,EAAexF,EAAS3C,KAsBwBoF,SAAoC,YAA1BzC,EAASE,aAA/D,SACI,cAACiF,GAAA,EAAD,SAGR,cAAC9C,GAAD,CAAaG,QAASsD,EAAgBrD,SAAoC,YAA1BzC,EAASE,eACzD,8BAEQiG,EAAiB3F,KAAI,SAAAI,GAAC,OAAI,cAACwD,GAAD,CAAiBtD,KAAMF,EAAGpD,WAAYwC,EAAS3C,GACzCkH,WAAYA,EACZD,gBAAiBA,EACjBD,iBAAkBA,GAHbzD,EAAEvD,SAO/C,sBAAK+I,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQrD,QAA6B,QAApBjD,EAASC,OAAmB,WAAa,OAClD0D,QAASqC,EACTtC,MAAO,UAFf,iBAKA,cAAC4C,EAAA,EAAD,CAAQrD,QAA6B,WAApBjD,EAASC,OAAsB,WAAa,OACrD0D,QAASsC,EACTvC,MAAO,UAFf,oBAIA,cAAC4C,EAAA,EAAD,CAAQrD,QAA6B,cAApBjD,EAASC,OAAyB,WAAa,OACxD0D,QAASuC,EACTxC,MAAO,YAFf,gC,SC5EC6C,GAAqC,SAAC,GAAoB,IAAD,IAAlBlB,YAAkB,SAC5D9E,EAAYiG,aAAyD,SAAAzH,GAAK,OAAIA,EAAMwB,aACpFI,EAAQ6F,aAA8C,SAAAzH,GAAK,OAAIA,EAAM4B,SACrE/B,EAAa4H,aAAuC,SAAAzH,GAAK,OAAIA,EAAM0H,KAAK7H,cACxEb,EAAW2H,cAEjBC,qBAAU,WACN,IAAIN,GAASzG,EAAb,CAGA,IAAMgH,EN8CH,SAAC7H,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,IACKZ,MAAK,SAAC2F,GACHjE,EAASuC,EAAe,CAACC,UAAWyB,EAAInE,QACxCE,EAASK,EAAe,CAACC,OAAQ,mBMlDzCN,EAAS6H,MACV,CAACP,EAAMtH,EAAUa,IAEpB,IAAM2F,EAAaE,uBAAY,SAAUpH,EAAYG,GACjD,IAAMoI,EL2Ec,SAACnI,EAAgBD,GAAjB,OAAwC,SAACO,GACjEd,EAAwBO,EAAYC,GAC/BpB,MAAK,SAAA2F,GACF,IAAMhD,EAAS0B,GAAa,CAACjD,SAAQD,eACrCO,EAASiB,OK/EC0H,CAAarJ,EAAIG,GAC/BO,EAAS6H,KACV,CAAC7H,IAEEwH,EAAUd,uBAAY,SAAUtH,EAAeK,GACjD,IAAMoI,EL6EW,SAACzI,EAAeK,GAAhB,OAAuC,SAACO,GAC7DA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAA2F,GACF,GAA4B,IAAxBA,EAAInE,KAAKoE,WAAkB,CAC3B,IAAMnB,EAAOkB,EAAInE,KAAKA,KAAK8I,KACrB3H,EAAS6B,GAAU,CAACC,SAC1B/C,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,oBAEjCP,EAAqBkE,EAAInE,KAAME,MAGtCmE,OAAM,SAAC/D,GACJG,EAAyBH,EAAOJ,OK3FtB6I,CAAUzJ,EAAOK,GAC/BO,EAAS6H,KACV,CAAC7H,IAEE8I,EAAepC,uBAAY,SAAUpH,EAAYgB,EAAsBb,GACzE,IAAMoI,EAAQrE,GAAalE,EAAI,CAACgB,UAASb,GACzCO,EAAS6H,KACV,CAAC7H,IAEEuG,EAAkBG,uBAAY,SAAUpH,EAAYyJ,EAAkBtJ,GACxE,IAAMoI,EAAQrE,GAAalE,EAAI,CAACF,MAAO2J,GAAWtJ,GAClDO,EAAS6H,KACV,CAAC7H,IAEEuH,EAAeb,uBAAY,SAAUvF,EAAyB1B,GAChE,IAAMwB,EAASoB,EAAuB,CAAC/C,GAAIG,EAAYyC,OAAQf,IAC/DnB,EAASiB,KACV,CAACjB,IAEEyH,EAAiBf,uBAAY,SAAUpH,GACzC,INyByBG,EMzBnBoI,GNyBmBpI,EMzBMH,EN0B5B,SAACU,GAEJA,EAASK,EAAe,CAACC,OAAQ,aAEjCN,EAASsC,EAA6B,CAAChD,GAAIG,EAAYa,OAAQ,aAC/DpB,EAA4BO,GACvBnB,MAAK,SAAC2F,GACHjE,EAAS0B,EAAiB,CAACpC,GAAIG,KAE/BO,EAASK,EAAe,CAACC,OAAQ,oBMlCzCN,EAAS6H,KACV,CAAC7H,IAEE0H,EAAsBhB,uBAAY,SAAUpH,EAAYF,GAC1D,IAAMyI,EN4CuB,SAACvI,EAAYF,GAC9C,OAAO,SAACY,GACJd,EAA4BI,EAAIF,GAC3Bd,MAAK,SAAC2F,GACHjE,EAASoC,EAAsB,CAAC9C,KAAIF,eMhD9B4J,CAAsB1J,EAAIF,GACxCY,EAAS6H,KACV,CAAC7H,IAEEiJ,EAAcvC,uBAAY,SAACtH,GAC7B,IAAMyI,EN6Be,SAACzI,GAC1B,OAAO,SAACY,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAA4BE,GACvBd,MAAK,SAAC2F,GACHjE,EAAS+B,EAAc,CAACE,SAAUgC,EAAInE,KAAKA,KAAK8I,QAChD5I,EAASK,EAAe,CAACC,OAAQ,mBMnC3B4I,CAAc9J,GAC5BY,EAAS6H,KACV,CAAC7H,IAEJ,OAAKa,EAKE,qCACH,cAACsI,GAAA,EAAD,CAAMC,WAAS,EAACf,MAAO,CAACgB,QAAS,QAAjC,SACI,cAAC/E,GAAD,CAAaG,QAASwE,MAE1B,cAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ9G,EAAUC,KAAI,SAAAZ,GACV,IAAI0H,EAAmB3G,EAAMf,EAAGvC,IAEhC,OAAO,cAAC6J,GAAA,EAAD,CAAMP,MAAI,EAAV,SACH,cAACY,GAAA,EAAD,CAAOnB,MAAO,CAACgB,QAAS,QAAxB,SACI,cAAChC,GAAD,CACIpF,SAAUJ,EACVe,MAAO2G,EACP/C,WAAYA,EACZe,aAAcA,EACdC,QAASA,EACTlB,iBAAkBwC,EAClBrB,eAAgBA,EAChBlB,gBAAiBA,EACjBmB,oBAAqBA,EACrBJ,KAAMA,OAZKzF,EAAGvC,YAb/B,cAAC,KAAD,CAAUmK,GAAI,Y,oBCvE7B,SAASC,GAAM3D,GACX,OAAO,cAAC,KAAD,aAAU4D,UAAW,EAAGzE,QAAQ,UAAaa,IAGjD,SAAS6D,KAEZ,IAAMxJ,EAAQqI,aAA6C,SAAAzH,GAAK,OAAIA,EAAM6I,IAAIzJ,SACxEJ,EAAW2H,cAEXmC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJhK,EAASG,EAAc,CAACC,MAAO,SAI7B6J,EAAmB,OAAV7J,EAEf,OACI,cAAC8J,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,EAAzD,SACI,cAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,QAAtC,SACKlK,M,qDCfJmK,GAAQ,WACjB,IAAMvK,EAAW2H,cACX9G,EAAa4H,aAAuC,SAAAzH,GAAK,OAAIA,EAAM0H,KAAK7H,cAExE2J,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAAS1K,OAAS,KAChC8K,EAAOJ,SAAW,iCAFlBI,EAAOJ,SAAW,WAIfI,GAGXE,SAAU,SAAAH,GVAK,IAACjL,EUCZE,GVDYF,EUCKiL,EVDqB,SAAC/K,GAC/CA,EAASK,EAAe,CAACC,OAAQ,aACjCT,EAAcC,GACTxB,MAAK,SAAC2F,GACyB,IAAxBA,EAAInE,KAAKoE,YACTlE,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBkE,EAAInE,KAAME,MAGtCmE,OAAM,SAAC/D,GACJG,EAAyBH,EAAOJ,SUVhCwK,EAAOW,eAIf,OAAItK,EACO,cAAC,KAAD,CAAU4I,GAAI,MAIlB,cAACN,GAAA,EAAD,CAAMC,WAAS,EAACgC,QAAQ,SAAxB,SACH,cAACjC,GAAA,EAAD,CAAMP,MAAI,EAACyC,GAAI,EAAf,SACI,sBAAMH,SAAUV,EAAOc,aAAvB,SACI,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,aADzB,qBAIJ,wEACA,0DACA,kDAEJ,eAACC,GAAA,EAAD,WACI,cAAC3G,GAAA,EAAD,aACIO,MAAM,QACNqG,OAAO,UACHrB,EAAOsB,cAAc,WAE5BtB,EAAOuB,QAAQpB,OAASH,EAAOQ,OAAOL,MACnC,qBAAKtC,MAAO,CAAC1C,MAAO,OAApB,SAA6B6E,EAAOQ,OAAOL,QAAe,KAC9D,cAAC1F,GAAA,EAAD,aACI+G,KAAK,WACLxG,MAAM,WACNqG,OAAO,UACHrB,EAAOsB,cAAc,cAE5BtB,EAAOuB,QAAQnB,UAAYJ,EAAOQ,OAAOJ,SACtC,qBAAKvC,MAAO,CAAC1C,MAAO,OAApB,SAA6B6E,EAAOQ,OAAOJ,WAAkB,KACjE,cAACqB,GAAA,EAAD,aACIzG,MAAO,cACP0G,QAAS,cAAC/E,GAAA,EAAD,IAGTN,QAAS2D,EAAOO,OAAOF,YACnBL,EAAOsB,cAAc,gBAE7B,cAACvD,EAAA,EAAD,CAAQyD,KAAM,SAAU9G,QAAS,YAAaS,MAAO,YAArD,gCCtBTwG,OAlDf,YAAyC,IAAD,IAA1B7E,YAA0B,SAC9BhH,EAASmI,aAAiD,SAACzH,GAAD,OAAWA,EAAM6I,IAAIvJ,UAC/EiB,EAAgBkH,aAAuC,SAACzH,GAAD,OAAWA,EAAM6I,IAAItI,iBAC5EV,EAAa4H,aAAuC,SAAAzH,GAAK,OAAIA,EAAM0H,KAAK7H,cACxEb,EAAW2H,cAEjBC,qBAAU,WACN5H,GV8B6B,SAACA,GAClCH,IAAavB,MAAK,SAAA2F,GACc,IAAxBA,EAAInE,KAAKoE,YACTlE,EAASe,EAAgB,CAACI,OAAO,KAGrCnB,EAASwB,EAAoB,CAACL,OAAO,aUnCtC,CAACnB,IAEJ,IAAMoM,EAAgB1F,uBAAY,WAC9B1G,GX4BsB,SAACA,GAC3BA,EAASK,EAAe,CAACC,OAAQ,aACjCT,IACKvB,MAAK,SAAC2F,GACyB,IAAxBA,EAAInE,KAAKoE,YACTlE,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBkE,EAAInE,KAAME,MAGtCmE,OAAM,SAAC/D,GACJG,EAAyBH,EAAOJ,WWvCrC,CAACA,IAEJ,OAAKuB,EAQD,sBAAK2F,UAAU,MAAf,UACI,cAAC0C,GAAD,IACA,eAACyC,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,eAACC,EAAA,EAAD,CAASrF,UAAU,YAAnB,UAII,cAACsF,EAAA,EAAD,CAAYtH,QAAQ,KAApB,mBAGCrE,GAAc,cAAC0H,EAAA,EAAD,CAAQrD,QAAS,YAAaS,MAAO,YAAcC,QAASwG,EAA5D,wBAEP,YAAX9L,GAAwB,cAACmM,EAAA,EAAD,OAE7B,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,GAAD,CAAexF,KAAMA,OAC3D,cAAC,KAAD,CAAOuF,KAAM,SAAUC,OAAQ,kBAAM,cAAC,GAAD,OAErC,cAAC,KAAD,CAAOD,KAAM,IAAKC,OAAQ,kBAAM,wDAChC,cAAC,KAAD,CAAUC,KAAM,IAAKtD,GAAI,iBA3B9B,qBACHpB,MAAO,CAACiE,SAAU,QAASU,IAAK,MAAOC,UAAW,SAAUC,MAAO,QADhE,SAEH,cAACC,EAAA,EAAD,O,kBCvBNC,GAAcC,aAAgB,CAChCzK,MAAOW,GACPf,UAAWE,EACXmH,IAAKpI,EACLiH,KAAMtH,IAKGkM,GAAQC,YAAe,CAChClM,QAAS+L,GACTI,WAAY,SAACC,GAAD,OACRA,IACKC,QAAQC,SAQrBC,OAAON,MAAQA,G,aCtBfO,IAASf,OACD,cAAC,IAAD,CAAUQ,MAAOA,GAAjB,SACI,cAAC,KAAD,UACI,cAAC,GAAD,QAGZQ,SAASC,eAAe,SAM5B5P,M","file":"static/js/main.43e60546.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        // 'API-KEY': 'e12dcb15-1200-4ce1-bb28-bb99ac0ccb98'\r\n        'API-KEY': '925a078a-aac7-41df-b619-d47eca8c427b'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n//auth login\r\n\r\nexport const authAPI = {\r\n\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(`auth/login`, data);\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`);\r\n    },\r\n\r\n    me() {\r\n        return instance.get<ResponseType<AuthDataType>>(`auth/me`);\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { ResponseType } from '../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { setAppStatusAC } from '../../app/app-reducer'\r\nimport { authAPI, LoginParamsType } from \"../../api/todolists-api\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    }\r\n})\r\n// type InitialStateType = typeof initialState\r\n\r\n// take reducer\r\nexport const authReducer = slice.reducer; /*(state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n\r\n// actions\r\n// export const setIsLoggedInAC = (value: boolean) =>\r\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// take ActionCreator\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n// type ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer; /*(state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}*/\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\r\n// export type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    // status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    // error: string | null\r\n    // isInitialized: boolean\r\n// }\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions /*(error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)*/\r\n /*(status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)*/\r\n /*(value:  boolean) => ({ type: 'APP/SET-IS-INITIALIZED', value } as const)*/\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        }\r\n\r\n        dispatch(setAppInitializedAC({value: true}))\r\n    })\r\n}\r\n\r\n// export type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n// export type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n//\r\n// type ActionsType =\r\n//     | SetAppErrorActionType\r\n//     | SetAppStatusActionType\r\n// | ReturnType<typeof setAppInitializedAC>\r\n\r\n\r\n\r\n","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, setAppStatusAC } from '../../app/app-reducer'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state.splice(index, 1);\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'});\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n                // .map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n                // .map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer; // (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id != action.id)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n//\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC} = slice.actions\r\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n// export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\r\n//     type: 'CHANGE-TODOLIST-TITLE',\r\n//     id,\r\n//     title\r\n// } as const)\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n//     type: 'CHANGE-TODOLIST-FILTER',\r\n//     id,\r\n//     filter\r\n// } as const)\r\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\n// export type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\n// export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\n// export type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n// type ActionsType =\r\n//     | RemoveTodolistActionType\r\n//     | AddTodolistActionType\r\n//     | ReturnType<typeof changeTodolistTitleAC>\r\n//     | ReturnType<typeof changeTodolistFilterAC>\r\n//     | SetTodolistsActionType\r\n//     | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api';\r\nimport { Dispatch } from 'redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppStatusAC } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { addTodolistAC, removeTodolistAC, setTodolistsAC } from './todolists-reducer';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) tasks.splice(index, 1);\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task);\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) tasks[index] = {...tasks[index], ...action.payload.model}\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: TodolistType) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n\r\n    } /*{\r\n        [addTodolistAC.type]: (state, action: PayloadAction<{}>)=>{\r\n\r\n        },\r\n        [removeTodolistAC.type]: (state, action: PayloadAction<{}>)=>{},\r\n        [setTodolistsAC.type]: (state, action: PayloadAction<{}>)=>{},\r\n    }*/\r\n});\r\n\r\nexport const tasksReducer = slice.reducer; /*(state: TasksStateType = initialState, action: any): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case addTodolistAC.type:\r\n            return {...state, [action.payload.todolist.id]: []}\r\n        case removeTodolistAC.type:\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case setTodolistsAC.type: {\r\n            const copyState = {...state}\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n\r\n// actions\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions;\r\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\r\n//     ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n// export const addTaskAC = (task: TaskType) =>\r\n//     ({type: 'ADD-TASK', task} as const)\r\n// export const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n//     ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\n// export const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n//     ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n// type ActionsType =\r\n//     | ReturnType<typeof removeTaskAC>\r\n//     | ReturnType<typeof addTaskAC>\r\n//     | ReturnType<typeof updateTaskAC>\r\n//     | AddTodolistActionType\r\n//     | RemoveTodolistActionType\r\n//     | SetTodolistsActionType\r\n//     | ReturnType<typeof setTasksAC>\r\n// type ThunkDispatch = Dispatch\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {\r\n        task,\r\n        todolistId,\r\n        changeTaskStatus,\r\n        changeTaskTitle,\r\n        removeTask,\r\n    } = props;\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [removeTask, task.id, todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [changeTaskStatus, task.id, todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [changeTaskTitle, task.id, todolistId]);\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called');\r\n\r\n    const {\r\n        todolist,\r\n        tasks,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle,\r\n        removeTask,\r\n        removeTodolist,\r\n        changeTodolistTitle,\r\n    } = props;\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(todolist.id)\r\n        dispatch(thunk)\r\n    }, [demo, dispatch, todolist.id])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id)\r\n    }\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitleHandler} />\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskHandler} disabled={todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                                removeTask={removeTask}\r\n                                                changeTaskTitle={changeTaskTitle}\r\n                                                changeTaskStatus={changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [demo, dispatch, isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 20) {\r\n                errors.password = 'Must be 20 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            // name=\"rememberMe\"\r\n                            // onChange={formik.handleChange}\r\n                            checked={formik.values.rememberMe}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'secondary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport { AppBar, Button, CircularProgress, Container, LinearProgress, Toolbar, Typography } from '@material-ui/core'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { Login } from \"../features/Login/Login\";\r\nimport { logoutTC } from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar className=\"headerBar\">\r\n                    {/*<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">*/}\r\n                    {/*    <Menu/>*/}\r\n                    {/*</IconButton>*/}\r\n                    <Typography variant=\"h6\">\r\n                        Todos\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant={\"contained\"} color={\"secondary\"}  onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n\r\n                    <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { appReducer } from './app-reducer';\r\nimport { authReducer } from \"../features/Login/auth-reducer\";\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n})\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}