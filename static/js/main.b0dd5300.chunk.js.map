{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","validatedTitle","trim","isAllBtnActive","filter","isActiveBtnActive","isCompletedBtnActive","errorMessage","style","color","tasks","map","t","styleTask","isDone","className","key","id","type","checked","onChange","e","changeTaskStatus","currentTarget","onClick","removeTask","value","evt","onKeyPress","changeFilter","App","v1","setTasks","setFilter","tasksForTodolist","filteredTasks","newTasks","taskId","updatedTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6QAmBO,SAASA,EAASC,GACrB,MAAwBC,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAwBF,oBAAkB,GAA1C,mBAAKG,EAAL,KAAYC,EAAZ,KACMC,EAAU,WACZ,IAAMC,EAAiBL,EAAMM,OAC5BD,GAAkBP,EAAMM,QAAQC,KAC/BA,GAAkBF,GAAS,GAC7BF,EAAS,KAYPM,EAAmC,QAAjBT,EAAMU,OAAoB,SAAW,GACvDC,EAAsC,WAAjBX,EAAMU,OAAuB,SAAW,GAC7DE,EAAyC,cAAjBZ,EAAMU,OAA0B,SAAW,GACnEG,EAAeT,EAAQ,yBAAKU,MAAO,CAACC,MAAO,QAApB,sBAAuD,KAE9EC,EAAQhB,EAAMgB,MAAMC,KAAI,SAAAC,GAC1B,IAAIC,EAAY,cAGhB,OAFAD,EAAEE,SAAWD,EAAY,kBAGrB,wBAAIE,UAAWF,EAAWG,IAAKJ,EAAEK,IAC7B,2BACIC,KAAK,WACLC,QAASP,EAAEE,OACXM,SAAU,SAACC,GAAD,OAAO3B,EAAM4B,iBAAiBV,EAAEK,GAAII,EAAEE,cAAcJ,YAElE,8BAAOP,EAAEhB,OACT,4BAAQ4B,QAAS,kBAAM9B,EAAM+B,WAAWb,EAAEK,MAA1C,SAIZ,OACI,6BACI,4BAAKvB,EAAME,OACX,6BACI,2BACI8B,MAAO9B,EACPwB,SApCQ,SAACO,GACrB9B,EAAS8B,EAAIJ,cAAcG,OAC3B3B,GAAS,IAmCG6B,WAjCU,SAACD,GAAD,MAAsD,UAAZA,EAAIX,KAAmBhB,KAkC3Ee,UAAWjB,EAAQ,QAAU,KAEjC,4BAAQ0B,QAASxB,GAAjB,KACCO,GAEL,4BACKG,GAEL,6BACI,4BAAQK,UAAWZ,EAAgBqB,QA1Cf,kBAAM9B,EAAMmC,aAAa,SA0C7C,OACA,4BAAQd,UAAWV,EAAmBmB,QA1Cf,kBAAM9B,EAAMmC,aAAa,YA0ChD,UACA,4BAAQd,UAAWT,EAAsBkB,QA1Cf,kBAAM9B,EAAMmC,aAAa,eA0CnD,eChBDC,MAvDf,WAEI,MAAwBnC,mBAAS,CAC7B,CAACsB,GAAIc,cAAMnC,MAAO,WAAYkB,QAAQ,GACtC,CAACG,GAAIc,cAAMnC,MAAO,KAAMkB,QAAQ,GAChC,CAACG,GAAIc,cAAMnC,MAAO,UAAWkB,QAAQ,GACrC,CAACG,GAAIc,cAAMnC,MAAO,WAAYkB,QAAQ,GACtC,CAACG,GAAIc,cAAMnC,MAAO,UAAWkB,QAAQ,KALzC,mBAAKJ,EAAL,KAAYsB,EAAZ,KAwBA,EAA0BrC,mBAA2B,OAArD,mBAAKS,EAAL,KAAa6B,EAAb,KAEIC,EAAmBxB,EAavB,MAXe,WAAXN,IACA8B,EAAmBxB,EAAMN,QAAO,SAAAQ,GAAC,OAAKA,EAAEE,WAE7B,cAAXV,IACA8B,EAAmBxB,EAAMN,QAAO,SAAAQ,GAAC,OAAIA,EAAEE,WAQvC,yBAAKC,UAAU,OACX,kBAACtB,EAAD,CAAUG,MAAM,cACNQ,OAAQA,EACRM,MAAOwB,EACPT,WApClB,SAAoBR,GAChB,IAAIkB,EAAgBzB,EAAMN,QAAO,SAAAQ,GAAC,OAAIA,EAAEK,KAAOA,KAC/Ce,EAASG,IAmCKnC,QAhClB,SAAiBJ,GACb,IACIwC,EAAQ,CADD,CAACnB,GAAIc,cAAMnC,QAAOkB,QAAQ,IACzB,mBAAaJ,IACzBsB,EAASI,IA8BKd,iBA3BlB,SAA0Be,EAAgBvB,GACtC,IAAMwB,EAAe5B,EAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEK,KAAOoB,EAAT,2BAAsBzB,GAAtB,IAAyBE,WAAUF,KACvEoB,EAASM,IA0BKT,aAZlB,SAAsBH,GAClBO,EAAUP,QCjCEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLyD,QAAQzD,MAAMA,EAAM0D,a","file":"static/js/main.b0dd5300.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string) => void\r\n    changeFilter: (value: FilterValuesType) => void\r\n    addTask: (title: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, isDone: boolean) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<boolean>(false);\r\n    const addTask = () => {\r\n        const validatedTitle = title.trim();\r\n        (validatedTitle && props.addTask(validatedTitle)) ||\r\n        (!validatedTitle && setError(true));\r\n        setTitle('');\r\n    };\r\n\r\n    const onChangeHandler = (evt: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(evt.currentTarget.value);\r\n        setError(false);\r\n    };\r\n    const onKeyPressHandler = (evt: KeyboardEvent<HTMLInputElement>) => evt.key === 'Enter' && addTask()\r\n    const onFilterAllClickHandler = () => props.changeFilter(\"all\");\r\n    const onFilterActiveClickHandler = () => props.changeFilter(\"active\");\r\n    const onFilterCompletedClickHandler = () => props.changeFilter(\"completed\");\r\n\r\n    const isAllBtnActive = (props.filter === \"all\") ? 'active' : '';\r\n    const isActiveBtnActive = (props.filter === \"active\") ? 'active' : '';\r\n    const isCompletedBtnActive = (props.filter === \"completed\") ? 'active' : '';\r\n    const errorMessage = error ? <div style={{color: 'red'}}>Title is required!</div> : null;\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        let styleTask = 'activeTasks';\r\n        t.isDone && (styleTask = 'completedTasks');\r\n\r\n        return (\r\n            <li className={styleTask} key={t.id}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}\r\n                    onChange={(e) => props.changeTaskStatus(t.id, e.currentTarget.checked)}\r\n                />\r\n                <span>{t.title}</span>\r\n                <button onClick={() => props.removeTask(t.id)}>x</button>\r\n            </li>\r\n        )\r\n    });\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    className={error ? 'error' : ''}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {errorMessage}\r\n            </div>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button className={isAllBtnActive} onClick={onFilterAllClickHandler}>All</button>\r\n                <button className={isActiveBtnActive} onClick={onFilterActiveClickHandler}>Active</button>\r\n                <button className={isCompletedBtnActive} onClick={onFilterCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {Todolist} from \"./TodoList\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ]);\r\n\r\n    function removeTask(id: string) {\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        let task = {id: v1(), title, isDone: false};\r\n        let newTasks = [task, ...tasks]\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean) {\r\n        const updatedTasks = tasks.map(t => t.id === taskId ? {...t, isDone} : t);\r\n        setTasks(updatedTasks);\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType) {\r\n        setFilter(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title=\"learn react\"\r\n                      filter={filter}\r\n                      tasks={tasksForTodolist}\r\n                      removeTask={removeTask}\r\n                      addTask={addTask}\r\n                      changeTaskStatus={changeTaskStatus}\r\n                      changeFilter={changeFilter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}