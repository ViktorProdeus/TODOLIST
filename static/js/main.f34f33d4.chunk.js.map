{"version":3,"sources":["components/Button.module.css","components/Button.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","filter","value","s","activeFilter","onClick","callBack","Todolist","useState","title","setTitle","error","setError","addTask","trimTitle","trim","onFilterClickHandler","valueFilter","changeFilter","onChange","e","currentTarget","onKeyPress","key","tasks","map","t","id","isDone","type","checked","evt","statusChangeTask","removeTask","App","v1","setTasks","setFilter","tasksForTodolist","filteredTasks","newTasks","task","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f34f33d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeFilter\":\"Button_activeFilter__yKsi0\"};","import React from \"react\";\r\nimport {FilterValuesType} from \"../App\";\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonType = {\r\n    value: FilterValuesType\r\n    callBack: () => void\r\n    filter?: FilterValuesType\r\n}\r\n\r\nexport const Button: React.FC<ButtonType> = (props) => {\r\n    return (\r\n        <>\r\n            <button\r\n                className={props.filter === props.value ? s.activeFilter : ''}\r\n                onClick={props.callBack}>{props.value}</button>\r\n        </>\r\n\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {Button} from \"./components/Button\";\r\n\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string) => void\r\n    changeFilter: (value: FilterValuesType) => void\r\n    addTask: (title: string) => void\r\n    statusChangeTask: (id: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const addTask = () => {\r\n        const trimTitle = title.trim()\r\n        if (trimTitle) {\r\n            props.addTask(trimTitle);\r\n        } else {\r\n            setError(\"Title is required!\");\r\n        }\r\n\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    // const onAllClickHandler = () => props.changeFilter(\"all\");\r\n    // const onActiveClickHandler = () => props.changeFilter(\"active\");\r\n    // const onCompletedClickHandler = () => props.changeFilter(\"completed\");\r\n\r\n    const onFilterClickHandler = (valueFilter: FilterValuesType) => {\r\n        return () => props.changeFilter(valueFilter);\r\n    }\r\n\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? 'error' : ''}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className={'error-message'}>{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id)\r\n                    const changeHandler = (evt: ChangeEvent<HTMLInputElement>) => {\r\n                        props.statusChangeTask(t.id, evt.currentTarget.checked)\r\n                    }\r\n                    return <li key={t.id} className={t.isDone? 'is-done' : ''}>\r\n                        <input type=\"checkbox\"\r\n                               checked={t.isDone}\r\n                               onChange={changeHandler}\r\n                        />\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            {/*<button className={props.filter==='all'? 'activeFilter': ''} onClick={onAllClickHandler}>All</button>*/}\r\n            {/*<button className={props.filter==='active'? 'activeFilter': ''} onClick={onActiveClickHandler}>Active</button>*/}\r\n            {/*<button className={props.filter==='completed'? 'activeFilter': ''} onClick={onCompletedClickHandler}>Completed</button>*/}\r\n            <Button filter={props.filter} value={'all'} callBack={onFilterClickHandler(\"all\")} />\r\n            <Button filter={props.filter} value={'active'} callBack={onFilterClickHandler(\"active\")}/>\r\n            <Button filter={props.filter} value={'completed'} callBack={onFilterClickHandler(\"completed\")}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\nimport {Todolist} from \"./TodoList\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ]);\r\n\r\n    function removeTask(id: string) {\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let newTasks = [task, ...tasks];\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    function changeStatusTask(id: string, isDone: boolean) {\r\n        let task = tasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks([...tasks]);\r\n        }\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType) {\r\n        setFilter(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title=\"What to learn\"\r\n                      tasks={tasksForTodolist}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTask={addTask}\r\n                      statusChangeTask={changeStatusTask}\r\n                      filter={filter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}