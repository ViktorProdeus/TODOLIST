{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","addItem","TextField","style","background","borderRadius","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","color","onClick","AddCircleOutlined","fontSize","EditableSpan","editMode","setEditMode","activateViewMode","trimTitle","label","id","defaultValue","size","onBlur","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","removeTodolist","Delete","listStyle","paddingLeft","tasks","map","t","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","todolist","tl","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","newTodolistID","spacing","allTodolistTasks","tasksForTodolist","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uECVC,SAASC,EAAYC,GACxB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAU,WACZ,IAAIC,EAAWL,EAAMM,OACJ,KAAbD,GACAP,EAAMS,QAAQF,GACdJ,EAAS,KAETE,EAAS,sBAejB,OACI,6BACI,kBAACK,EAAA,EAAD,CACIC,MAAO,CAACC,WAAY,QAASC,aAAc,OAC3CC,QAAQ,WACRC,MAAOb,EACPc,SAjBY,SAACC,GACrBd,EAASc,EAAEC,cAAcH,QAiBjBI,WAdc,SAACF,GACvBZ,EAAS,MACK,UAAVY,EAAEG,KACFd,KAYIF,QAASA,EACTiB,WAAYjB,IAEhB,kBAACkB,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASlB,GACjC,kBAACmB,EAAA,EAAD,CAAmBC,SAAU,YCrCtC,SAASC,EAAa3B,GACzB,MAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAkB,GAAlD,mBAAO2B,EAAP,KAAiBC,EAAjB,KAMMC,EAAmB,WACrBD,GAAY,GACZ,IAAME,EAAY7B,EAAMM,OACpBuB,EACA/B,EAAMgB,SAASe,GAEf/B,EAAMgB,SAAShB,EAAME,QAc7B,OAAO0B,EACH,kBAAClB,EAAA,EAAD,CACIsB,MAAOhC,EAAME,MACb+B,GAAG,sBACHC,aAAa,QACbpB,QAAQ,WACRqB,KAAK,QACLC,OAAQN,EACRf,MAAOb,EACPmC,WAAS,EACTrB,SAfqB,SAACC,GAC1B,OAAOd,EAASc,EAAEC,cAAcH,QAe5BI,WArBa,SAACF,GACJ,UAAVA,EAAEG,KACFU,OAqBF,0BAAMQ,cArCa,WACrBT,GAAY,GACZ1B,EAASH,EAAME,SAmC2BF,EAAME,O,+BCtBjD,SAASqC,EAASvC,GAcrB,OAAO,6BACH,4BACI,kBAAC2B,EAAD,CAAcX,SAVM,SAACd,GACzBF,EAAMwC,oBAAoBxC,EAAMiC,GAAI/B,IASaA,MAAOF,EAAME,QAC1D,kBAACoB,EAAA,EAAD,CAAYE,QAZG,kBAAMxB,EAAMyC,eAAezC,EAAMiC,MAa5C,kBAACS,EAAA,EAAD,QAIR,kBAAC3C,EAAD,CAAaU,QArBD,SAACP,GACbF,EAAMM,QAAQJ,EAAOF,EAAMiC,OAsB3B,wBAAItB,MAAO,CAACgC,UAAW,OAAQC,YAAa,IAEpC5C,EAAM6C,MAAMC,KAAI,SAAAC,GAUZ,OAAO,wBAAI3B,IAAK2B,EAAEd,GAAIe,UAAWD,EAAEE,OAAS,UAAY,IACpD,kBAACC,EAAA,EAAD,CAAU3B,MAAO,UAAWP,SATF,SAACC,GAC3B,IAAIkC,EAAiBlC,EAAEC,cAAckC,QACrCpD,EAAMqD,iBAAiBN,EAAEd,GAAIkB,EAAgBnD,EAAMiC,KAOUmB,QAASL,EAAEE,SACxE,kBAACtB,EAAD,CAAcX,SANW,SAACsC,GAC1BtD,EAAMuD,gBAAgBR,EAAEd,GAAIqB,EAAUtD,EAAMiC,KAKE/B,MAAO6C,EAAE7C,QACvD,kBAACoB,EAAA,EAAD,CAAYE,QAZO,kBAAMxB,EAAMwD,WAAWT,EAAEd,GAAIjC,EAAMiC,MAalD,kBAACS,EAAA,EAAD,CAAQhB,SAAS,gBAMrC,6BACI,kBAAC+B,EAAA,EAAD,CAAQ3C,QAA0B,QAAjBd,EAAM0D,OAAmB,YAAc,OAChDlC,QAtCU,kBAAMxB,EAAM2D,aAAa,MAAO3D,EAAMiC,MAqCxD,OAGA,kBAACwB,EAAA,EAAD,CAAQ3C,QAA0B,WAAjBd,EAAM0D,OAAsB,YAAc,OAAQnC,MAAO,UAClEC,QAxCa,kBAAMxB,EAAM2D,aAAa,SAAU3D,EAAMiC,MAuC9D,UAGA,kBAACwB,EAAA,EAAD,CAAQ3C,QAA0B,cAAjBd,EAAM0D,OAAyB,YAAc,OAAQnC,MAAO,YACrEC,QA1CgB,kBAAMxB,EAAM2D,aAAa,YAAa3D,EAAMiC,MAyCpE,e,2ECqGG2B,MAlKf,WAAgB,IAAD,EACPC,EAAcC,cACdC,EAAcD,cAElB,EAAgC7D,mBAAyB,CACrD,CAACgC,GAAI4B,EAAa3D,MAAO,gBAAiBwD,OAAQ,OAClD,CAACzB,GAAI8B,EAAa7D,MAAO,cAAewD,OAAQ,SAFpD,mBAAKM,EAAL,KAAgBC,EAAhB,KAKA,EAAwBhE,oBAAQ,mBAC3B4D,EAAc,CACX,CAAC5B,GAAI6B,cAAM5D,MAAO,WAAY+C,QAAQ,GACtC,CAAChB,GAAI6B,cAAM5D,MAAO,KAAM+C,QAAQ,KAHR,cAK3Bc,EAAc,CACX,CAAC9B,GAAI6B,cAAM5D,MAAO,OAAQ+C,QAAQ,GAClC,CAAChB,GAAI6B,cAAM5D,MAAO,aAAc+C,QAAQ,KAPhB,IAAhC,mBAAKJ,EAAL,KAAYqB,EAAZ,KAWA,SAASV,EAAWvB,EAAYkC,GAE5B,IAAIC,EAAgBvB,EAAMsB,GAE1BtB,EAAMsB,GAAcC,EAAcV,QAAO,SAAAX,GAAC,OAAIA,EAAEd,KAAOA,KAEvDiC,EAAS,eAAIrB,IAGjB,SAASvC,EAAQJ,EAAeiE,GAC5B,IAAIE,EAAO,CAACpC,GAAI6B,cAAM5D,MAAOA,EAAO+C,QAAQ,GAExCmB,EAAgBvB,EAAMsB,GAE1BtB,EAAMsB,GAAN,CAAqBE,GAArB,mBAA8BD,IAE9BF,EAAS,eAAIrB,IAGjB,SAASyB,EAAarC,EAAYgB,EAAiBkB,GAE/C,IAEIE,EAFgBxB,EAAMsB,GAEDI,MAAK,SAAAxB,GAAC,OAAIA,EAAEd,KAAOA,KAExCoC,IACAA,EAAKpB,OAASA,EAEdiB,EAAS,eAAIrB,KAIrB,SAASU,EAAgBtB,EAAY/B,EAAeiE,GAEhD,IAEIE,EAFgBxB,EAAMsB,GAEDI,MAAK,SAAAxB,GAAC,OAAIA,EAAEd,KAAOA,KAExCoC,IACAA,EAAKnE,MAAQA,EAEbgE,EAAS,eAAIrB,KAIrB,SAASc,EAAa5C,EAAyBoD,GAC3C,IAAIK,EAAWR,EAAUO,MAAK,SAAAE,GAAE,OAAIA,EAAGxC,KAAOkC,KAC1CK,IACAA,EAASd,OAAS3C,EAClBkD,EAAa,YAAID,KAIzB,SAASvB,EAAeR,GAEpBgC,EAAaD,EAAUN,QAAO,SAAAe,GAAE,OAAIA,EAAGxC,KAAOA,aAEvCY,EAAMZ,GAEbiC,EAAS,eAAIrB,IAGjB,SAASL,EAAoBP,EAAY/B,GACrC,IAAMsE,EAAWR,EAAUO,MAAK,SAAAE,GAAE,OAAIA,EAAGxC,KAAOA,KAC5CuC,IACAA,EAAStE,MAAQA,EACjB+D,EAAa,YAAID,KAiBzB,OACI,6BACI,kBAACU,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACtD,EAAA,EAAD,CAAYuD,KAAK,QAAQtD,MAAM,WAC3B,kBAACuD,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYjE,QAAQ,MAApB,QAGA,kBAAC2C,EAAA,EAAD,CAAQlC,MAAM,WAAd,WAGR,kBAACyD,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACxE,MAAO,CAACyE,QAAS,WAC7B,kBAACrF,EAAD,CAAaU,QA5B7B,SAAqBP,GACjB,IAAMmF,EAAgBvB,cAQtBG,EAAa,CANqB,CAC9BhC,GAAIoD,EACJnF,QACAwD,OAAQ,QAGA,mBAAkBM,KAC9BE,EAAS,2BAAIrB,GAAL,kBAAawC,EAAgB,UAqB7B,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,GAEjBtB,EAAUlB,KAAI,SAAA2B,GACV,IAAIc,EAAmB1C,EAAM4B,EAAGxC,IAC5BuD,EAAmBD,EASvB,MAPkB,WAAdd,EAAGf,SACH8B,EAAmBD,EAAiB7B,QAAO,SAAAX,GAAC,OAAKA,EAAEE,WAErC,cAAdwB,EAAGf,SACH8B,EAAmBD,EAAiB7B,QAAO,SAAAX,GAAC,OAAIA,EAAEE,WAIlD,kBAACiC,EAAA,EAAD,CAAM9D,IAAKqD,EAAGxC,GAAIwD,MAAI,GAClB,kBAACC,EAAA,EAAD,CAAO/E,MAAO,CAACyE,QAAS,SACpB,kBAAC7C,EAAD,CACInB,IAAKqD,EAAGxC,GACRA,GAAIwC,EAAGxC,GACP/B,MAAOuE,EAAGvE,MACV2C,MAAO2C,EACPhC,WAAYA,EACZG,aAAcA,EACdrD,QAASA,EACT+C,iBAAkBiB,EAClBf,gBAAiBA,EACjBG,OAAQe,EAAGf,OACXjB,eAAgBA,EAChBD,oBAAqBA,aClKjEmD,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SLqI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjG,GACLkG,QAAQlG,MAAMA,EAAMmG,c","file":"static/js/main.7a95d7aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddCircleOutlined} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.addItem(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                style={{background: \"white\", borderRadius: \"5px\"}}\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addTask}>\r\n                <AddCircleOutlined fontSize={\"large\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    };\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        const trimTitle = title.trim()\r\n        if (trimTitle) {\r\n            props.onChange(trimTitle);\r\n        } else {\r\n            props.onChange(props.title);\r\n        }\r\n    }\r\n\r\n    const onEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode()\r\n        }\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        return setTitle(e.currentTarget.value);\r\n    };\r\n\r\n\r\n    return editMode ?\r\n        <TextField\r\n            label={props.title}\r\n            id=\"outlined-size-small\"\r\n            defaultValue=\"Small\"\r\n            variant=\"standard\"\r\n            size=\"small\"\r\n            onBlur={activateViewMode}\r\n            value={title}\r\n            autoFocus\r\n            onChange={onChangeTitleHandler}\r\n            onKeyPress={onEnterPress}\r\n        />\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id);\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan onChange={changeTodolistTitle} title={props.title}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <ul style={{listStyle: \"none\", paddingLeft: 0}}>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    };\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color={\"primary\"} onChange={onChangeStatusHandler} checked={t.isDone}/>\r\n                        <EditableSpan onChange={onChangeTitleHandler} title={t.title}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete fontSize=\"small\"/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? \"contained\" : \"text\"} color={\"primary\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = title;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const newTodolistID = v1();\r\n\r\n        const newTodolist: TodolistType = {\r\n            id: newTodolistID,\r\n            title,\r\n            filter: 'all',\r\n        };\r\n\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({...tasks, [newTodolistID]: []})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n                            }\r\n\r\n                            return (\r\n                                <Grid key={tl.id} item>\r\n                                    <Paper style={{padding: \"20px\"}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}